name: Quality Assurance

# Comprehensive quality assurance pipeline for the OpenLDAP Prometheus Exporter
# Includes pre-checks, unit & integration tests, static analysis, and security scanning
# All jobs depend on pre-check passing to avoid wasting CI resources

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.23"

jobs:
  pre-check:
    name: Pre-Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go environment
      uses: ./.github/actions/setup-go-environment
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Auto-format code with gofmt
      run: |
        echo "Auto-formatting Go code with gofmt..."
        BEFORE=$(gofmt -s -l . | wc -l)
        if [ "$BEFORE" -gt 0 ]; then
          echo "Found $BEFORE files that need formatting:"
          gofmt -s -l .
          echo ""
          echo "Applying automatic formatting..."
          gofmt -s -w .
          AFTER=$(gofmt -s -l . | wc -l)
          if [ "$AFTER" -eq 0 ]; then
            echo "All files have been automatically formatted"
          else
            echo "ERROR: Some files still have formatting issues after gofmt"
            gofmt -s -l .
            exit 1
          fi
        else
          echo "All Go files are already properly formatted"
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check for ineffective assignments
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...
    
    - name: Run golangci-lint (quick check)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=3m
        skip-cache: false

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: pre-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go environment
      uses: ./.github/actions/setup-go-environment
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run unit tests with race detector and coverage
      timeout-minutes: 5
      run: go test -race -timeout=300s -coverprofile=coverage.out -covermode=atomic ./...

    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage is below 70%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests

  # integration-tests:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: pre-check

  #   services:
  #     openldap:
  #       image: bitnami/openldap:latest
  #       env:
  #         LDAP_ROOT: "dc=example,dc=org"
  #         LDAP_ADMIN_USERNAME: "admin"
  #         LDAP_ADMIN_PASSWORD: "adminpassword"
  #         LDAP_CONFIG_ADMIN_ENABLED: "yes"
  #         LDAP_CONFIG_ADMIN_USERNAME: "adminconfig"
  #         LDAP_CONFIG_ADMIN_PASSWORD: "configpassword"
  #         LDAP_SKIP_DEFAULT_TREE: "yes"
  #         LDAP_EXTRA_SCHEMAS: "dyngroup,cosine,inetorgperson,nis"
  #       ports:
  #       - 1389:1389
  #       options: >-
  #         --health-cmd "ldapsearch -x -H ldap://localhost:1389 -b '' -s base '(objectClass=*)' namingContexts" --health-interval 10s --health-timeout 5s --health-retries 10 --health-start-period 60s

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup Go environment
  #     uses: ./.github/actions/setup-go-environment
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Setup LDAP test environment
  #     uses: ./.github/actions/setup-ldap-test

  #   - name: Run integration tests
  #     env:
  #       TEST_LDAP_URL: ldap://localhost:1389
  #       TEST_LDAP_USERNAME: cn=adminconfig,cn=config
  #       TEST_LDAP_PASSWORD: configpassword
  #     run: go test -tags=integration -v ./tests/...

  #   - name: Install LDAP tools for operation tests
  #     run: sudo apt-get update && sudo apt-get install -y ldap-utils

  #   - name: Run operation metrics tests (bash-based)
  #     env:
  #       LDAP_HOST: localhost
  #       LDAP_PORT: 1389
  #       ADMIN_PASSWORD: adminpassword
  #       CONFIG_PASSWORD: configpassword
  #       EXPORTER_PORT: 9360
  #       TEST_TRAFFIC_OPERATIONS: 25
  #       TEST_TIMEOUT: 120
  #     run: |
  #       chmod +x tests/scripts/run-operation-metrics-test.sh
  #       ./tests/scripts/run-operation-metrics-test.sh --ldap-port 1389 --traffic 25

  #   - name: Generate test report
  #     if: always()
  #     run: |
  #       echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       if [[ -f /tmp/operation_metrics_test_report.txt ]]; then
  #         echo "### Operation Metrics Test Report" >> $GITHUB_STEP_SUMMARY
  #         echo '```' >> $GITHUB_STEP_SUMMARY
  #         cat /tmp/operation_metrics_test_report.txt >> $GITHUB_STEP_SUMMARY
  #         echo '```' >> $GITHUB_STEP_SUMMARY
  #       fi

  # static-analysis:
  #   name: Static Analysis
  #   runs-on: ubuntu-latest
  #   needs: pre-check

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup Go environment
  #     uses: ./.github/actions/setup-go-environment
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Install static analysis tools
  #     run: |
  #       echo "Installing static analysis tools..."
  #       go install honnef.co/go/tools/cmd/staticcheck@latest
  #       go install github.com/kisielk/errcheck@latest
  #       go install github.com/client9/misspell/cmd/misspell@latest
  #       go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
  #       go install golang.org/x/tools/cmd/goimports@latest
  #       go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
  #       echo "All tools installed successfully"
    
  #   - name: Run shadow analysis
  #     run: |
  #       echo "Running shadow analysis (variable shadowing detection)..."
  #       go vet -vettool=$(which shadow) ./...
    
  #   - name: Auto-format imports with goimports
  #     run: |
  #       echo "Auto-formatting Go imports with goimports..."
  #       BEFORE=$(goimports -l . 2>/dev/null | wc -l || echo "0")
  #       if [ "$BEFORE" -gt 0 ]; then
  #         echo "Found $BEFORE files with incorrect import formatting:"
  #         goimports -l . 2>/dev/null || true
  #         echo ""
  #         echo "Applying automatic import formatting..."
  #         goimports -w . 2>/dev/null || true
  #         AFTER=$(goimports -l . 2>/dev/null | wc -l || echo "0")
  #         if [ "$AFTER" -eq 0 ]; then
  #           echo "All import formatting has been automatically corrected"
  #         else
  #           echo "ERROR: Some files still have import formatting issues after goimports"
  #           goimports -l . 2>/dev/null || true
  #           exit 1
  #         fi
  #       else
  #         echo "All Go imports are already properly formatted"
  #       fi
    
  #   - name: Run staticcheck
  #     run: |
  #       echo "Running staticcheck (advanced static analysis)..."
  #       staticcheck ./...
    
  #   - name: Run errcheck
  #     run: |
  #       echo "Running errcheck (comprehensive error checking)..."
  #       errcheck -verbose -ignoretests ./...
    
  #   - name: Run misspell
  #     run: |
  #       echo "Running misspell (spelling checker)..."
  #       misspell -error .
    
  #   - name: Run gocyclo
  #     run: |
  #       echo "Running gocyclo (cyclomatic complexity analysis)..."
  #       echo "Checking functions with complexity > 20..."
  #       if gocyclo -over 20 . | grep -q .; then
  #         echo "Functions with complexity > 20 found:"
  #         gocyclo -over 20 .
  #         echo "These functions should be refactored to reduce complexity"
  #         exit 1
  #       else
  #         echo "No functions with complexity > 20 found"
  #       fi
  #       echo "Functions with complexity 15-20 (warnings):"
  #       if gocyclo -over 15 . | grep -v "_test.go" | head -5 | grep -q .; then
  #         gocyclo -over 15 . | grep -v "_test.go" | head -5
  #         echo "Consider refactoring these functions if possible"
  #       else
  #         echo "No non-test functions with complexity 15-20 found"
  #       fi

  # security:
  #   name: Security Analysis
  #   runs-on: ubuntu-latest
  #   needs: pre-check
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup Go environment
  #     uses: ./.github/actions/setup-go-environment
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Run Gosec Security Scanner
  #     run: |
  #       go install github.com/securego/gosec/v2/cmd/gosec@latest
  #       gosec -fmt sarif -out results.sarif ./... || true

  #   - name: Upload SARIF file
  #     uses: github/codeql-action/upload-sarif@v3
  #     with:
  #       sarif_file: results.sarif

  #   - name: Check for known vulnerabilities
  #     run: |
  #       go install golang.org/x/vuln/cmd/govulncheck@latest
  #       govulncheck ./...

  #   - name: Dependency review (Pull Request only)
  #     if: github.event_name == 'pull_request'
  #     uses: actions/dependency-review-action@v4
    
  #   - name: Check dependencies (Push events)
  #     if: github.event_name == 'push'
  #     run: |
  #       echo "Checking Go module dependencies..."
  #       go list -m -u all
  #       echo "Verifying module integrity..."
  #       go mod verify

  # test-summary:
  #   name: Pipeline Summary
  #   runs-on: ubuntu-latest
  #   needs: [ unit-tests, integration-tests, static-analysis, security ]
  #   if: always()

  #   steps:
  #   - name: Pipeline Results Summary
  #     run: |
  #       echo "## Quality Assurance Results Summary" >> $GITHUB_STEP_SUMMARY
  #       echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
  #       echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
  #       echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #       echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #       echo "| Static Analysis | ${{ needs.static-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #       echo "| Security Analysis | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

