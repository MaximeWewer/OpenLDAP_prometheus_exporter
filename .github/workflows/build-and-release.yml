name: Build and Release

on:
  workflow_dispatch:
    inputs:
      force_version:
        # Versioning pattern (number only): YEAR.MONTH.INDEX_OF_TAG (+1 at eatch tag)
        description: 'Force a specific version (optional, format: YYYY.MM.X)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      year_month: ${{ steps.version.outputs.year_month }}
      name_lower: ${{ steps.repo.outputs.name_lower }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.force_version }}" ]; then
          VERSION="${{ github.event.inputs.force_version }}"
          echo "Using forced version: $VERSION"
        else
          # Get current year and month
          YEAR_MONTH=$(date +'%Y.%m')
          
          # Get existing tags for current year.month (with 'v' prefix)
          EXISTING_TAGS=$(git tag -l "v${YEAR_MONTH}.*" | sort -V)
          
          if [ -z "$EXISTING_TAGS" ]; then
            # No tags for this year.month, start with .1
            VERSION="${YEAR_MONTH}.1"
          else
            # Get the highest version number for this year.month
            LATEST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
            # Remove 'v' prefix to extract version numbers
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            PATCH_VERSION=$(echo "$LATEST_VERSION" | cut -d'.' -f3)
            NEW_PATCH=$((PATCH_VERSION + 1))
            VERSION="${YEAR_MONTH}.${NEW_PATCH}"
          fi
          
          # Ensure the generated version doesn't already exist as a tag
          while git tag -l "v${VERSION}" | grep -q "v${VERSION}"; do
            echo "Tag v${VERSION} already exists, incrementing..."
            PATCH_VERSION=$(echo "$VERSION" | cut -d'.' -f3)
            NEW_PATCH=$((PATCH_VERSION + 1))
            VERSION="${YEAR_MONTH}.${NEW_PATCH}"
          done
        fi

        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "year_month=$(echo $VERSION | cut -d'.' -f1,2)" >> $GITHUB_OUTPUT

    - name: Convert repository name to lowercase
      id: repo
      run: |
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "Repository name converted to lowercase: $REPO_LOWER"
        echo "name_lower=$REPO_LOWER" >> $GITHUB_OUTPUT

  build-and-push-docker:
    needs: prepare-build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
        - linux/amd64
        - linux/arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare platform variables
      run: |
        echo "PLATFORM_ARCH=${platform##*/}" >> $GITHUB_ENV
      env:
        platform: ${{ matrix.platform }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}
        tags: |
          type=raw,value=${{ needs.prepare-build.outputs.version }}-${{ env.PLATFORM_ARCH }}
        labels: |
          org.opencontainers.image.title=OpenLDAP Prometheus exporter
          org.opencontainers.image.description=Prometheus exporter for OpenLDAP (${{ env.PLATFORM_ARCH }})
          org.opencontainers.image.version=${{ needs.prepare-build.outputs.version }}
          org.opencontainers.image.vendor=Maxime Wewer
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
          org.opencontainers.image.created={{ commit_date 'YYYY-MM-DDTHH:mm:ss' tz='Europe/Paris' }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      env:
        DOCKER_BUILD_SUMMARY: false
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        provenance: false # Disable provenance to avoid unknown/unknown
        sbom: false # Disable sbom to avoid unknown/unknown
        build-args: |
          VERSION=${{ needs.prepare-build.outputs.version }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # annotations: |
        #   org.opencontainers.image.description=Prometheus exporter for OpenLDAP (${{ env.PLATFORM_ARCH }})
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

  create-manifest:
    needs: [ prepare-build, build-and-push-docker ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push manifest for version tag
      run: |
        docker manifest create ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:${{ needs.prepare-build.outputs.version }} \
          --amend ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:amd64 \
          --amend ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:arm64
        docker manifest annotate ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:${{ needs.prepare-build.outputs.version }} \
          ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:amd64 \
          --annotation "org.opencontainers.image.description=Prometheus exporter for OpenLDAP"
        docker manifest annotate ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:${{ needs.prepare-build.outputs.version }} \
          ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:arm64 \
          --annotation "org.opencontainers.image.description=Prometheus exporter for OpenLDAP"
        docker manifest push ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:${{ needs.prepare-build.outputs.version }}

    - name: Create and push manifest for latest tag
      run: |
        docker manifest create ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:latest \
          --amend ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:amd64 \
          --amend ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:arm64
        docker manifest annotate ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:latest \
          ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:amd64 \
          --annotation "org.opencontainers.image.description=Prometheus exporter for OpenLDAP"
        docker manifest annotate ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:latest \
          ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:arm64 \
          --annotation "org.opencontainers.image.description=Prometheus exporter for OpenLDAP"
        docker manifest push ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:latest

  create-release:
    needs: [ prepare-build, create-manifest ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog from PRs and commits
      id: changelog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the latest tag (previous version)
        LATEST_TAG=$(git tag -l --sort=-version:refname | head -n 1)

        if [ -z "$LATEST_TAG" ]; then
          # No previous tag, get recent PRs and commits
          echo "No previous tag found, generating changelog from recent merged PRs and commits"
          PR_LIST=$(gh pr list --state merged --limit 10 --json number,title,url --jq '.[] | "- **PR [#\(.number)](\(.url))**: \(.title)"')
          COMMITS_LIST=$(git log --oneline --grep="Merge pull request" --invert-grep --max-count=10 | sed 's/^[a-f0-9]\+ /- **Commit**: /')
        else
          echo "Getting changes since tag: $LATEST_TAG"
          # Get commit range since last tag
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --oneline)
          
          if [ -z "$COMMITS_SINCE_TAG" ]; then
            CHANGELOG_CONTENT="No new changes since last release."
          else
            # Extract PR numbers from commit messages and get PR details
            PR_NUMBERS=$(git log ${LATEST_TAG}..HEAD --oneline --grep="Merge pull request" | grep -o "#[0-9]\+" | sed 's/#//' | sort -u)
            
            # Get PR details (limit to 10 most recent)
            PR_LIST=""
            if [ -n "$PR_NUMBERS" ]; then
              PR_COUNT=0
              for pr_num in $PR_NUMBERS; do
                if [ $PR_COUNT -ge 10 ]; then
                  break
                fi
                pr_info=$(gh pr view $pr_num --json number,title,url --jq '"- **PR [#" + (.number|tostring) + "](" + .url + ")**: " + .title' 2>/dev/null || echo "- **PR [#$pr_num]**: PR details not available")
                PR_LIST="$PR_LIST$pr_info"$'\n'
                PR_COUNT=$((PR_COUNT + 1))
              done
            fi
            
            # Get commits (not PR merges, limit to 10 most recent)
            COMMITS_LIST=$(git log ${LATEST_TAG}..HEAD --oneline --grep="Merge pull request" --invert-grep --max-count=10 | sed 's/^[a-f0-9]\+ /- **Commit**: /')
            
            # Combine PRs and commits
            CHANGELOG_CONTENT=""
            if [ -n "$PR_LIST" ]; then
              CHANGELOG_CONTENT="#### Pull Requests"$'\n'"$PR_LIST"
            fi
            if [ -n "$COMMITS_LIST" ]; then
              if [ -n "$CHANGELOG_CONTENT" ]; then
                CHANGELOG_CONTENT="$CHANGELOG_CONTENT"$'\n\n'"#### Commits"$'\n'"$COMMITS_LIST"
              else
                CHANGELOG_CONTENT="#### Commits"$'\n'"$COMMITS_LIST"
              fi
            fi
            
            if [ -z "$CHANGELOG_CONTENT" ]; then
              CHANGELOG_CONTENT="No changes found."
            fi
          fi
        fi

        # For first release case, combine PRs and commits
        if [ -z "$LATEST_TAG" ] && [ -n "$PR_LIST" ] && [ -n "$COMMITS_LIST" ]; then
          CHANGELOG_CONTENT="#### Pull Requests"$'\n'"$PR_LIST"$'\n\n'"#### Commits"$'\n'"$COMMITS_LIST"
        elif [ -z "$LATEST_TAG" ] && [ -n "$PR_LIST" ]; then
          CHANGELOG_CONTENT="#### Pull Requests"$'\n'"$PR_LIST"
        elif [ -z "$LATEST_TAG" ] && [ -n "$COMMITS_LIST" ]; then
          CHANGELOG_CONTENT="#### Commits"$'\n'"$COMMITS_LIST"
        elif [ -z "$LATEST_TAG" ]; then
          CHANGELOG_CONTENT="Initial release"
        fi

        # Save changelog to output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Save comparison URL for Full Changelog link
        if [ -n "$LATEST_TAG" ]; then
          COMPARISON_URL="https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v${{ needs.prepare-build.outputs.version }}"
        else
          COMPARISON_URL="https://github.com/${{ github.repository }}/commits/v${{ needs.prepare-build.outputs.version }}"
        fi
        echo "COMPARISON_URL=$COMPARISON_URL" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.prepare-build.outputs.version }}
        name: Release ${{ needs.prepare-build.outputs.version }}
        body: |
          ## OpenLDAP Prometheus Exporter v${{ needs.prepare-build.outputs.version }}

          ### Docker Images

          ```bash
          # Pull the latest version
          docker pull ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:${{ needs.prepare-build.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ needs.prepare-build.outputs.name_lower }}:latest
          ```

          ### Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ---

          **Full Changelog**: ${{ steps.changelog.outputs.COMPARISON_URL }}
        draft: false
        prerelease: false
