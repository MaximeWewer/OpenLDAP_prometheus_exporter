name: Build and Release

on:
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force a specific version (optional, format: YYYY.MM.X)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  generate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      year_month: ${{ steps.version.outputs.year_month }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.force_version }}" ]; then
          VERSION="${{ github.event.inputs.force_version }}"
          echo "Using forced version: $VERSION"
        else
          # Get current year and month
          YEAR_MONTH=$(date +'%Y.%m')
          
          # Get existing tags for current year.month
          EXISTING_TAGS=$(git tag -l "${YEAR_MONTH}.*" | sort -V)
          
          if [ -z "$EXISTING_TAGS" ]; then
            # No tags for this year.month, start with .1
            VERSION="${YEAR_MONTH}.1"
          else
            # Get the highest version number for this year.month
            LATEST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
            PATCH_VERSION=$(echo "$LATEST_TAG" | cut -d'.' -f3)
            NEW_PATCH=$((PATCH_VERSION + 1))
            VERSION="${YEAR_MONTH}.${NEW_PATCH}"
          fi
        fi

        echo "Generated version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "year_month=$(echo $VERSION | cut -d'.' -f1,2)" >> $GITHUB_OUTPUT

  build-and-push-docker:
    needs: generate-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.generate-version.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          VERSION=${{ needs.generate-version.outputs.version }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    needs: [ generate-version, build-and-push-docker ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog from PRs
      id: changelog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the latest tag (previous version)
        LATEST_TAG=$(git tag -l --sort=-version:refname | head -n 1)

        if [ -z "$LATEST_TAG" ]; then
          # No previous tag, get all PRs
          echo "No previous tag found, generating changelog from all merged PRs"
          PR_LIST=$(gh pr list --state merged --limit 25 --json number,title,url --jq '.[] | "- [#\(.number)] \(.title) (\(.url))"')
        else
          echo "Getting PRs since tag: $LATEST_TAG"
          # Get commit range since last tag
          COMMITS_SINCE_TAG=$(git rev-list ${LATEST_TAG}..HEAD --oneline)
          
          if [ -z "$COMMITS_SINCE_TAG" ]; then
            PR_LIST="No new changes since last release."
          else
            # Extract PR numbers from commit messages and get PR details
            PR_NUMBERS=$(git log ${LATEST_TAG}..HEAD --oneline --grep="Merge pull request" | grep -o "#[0-9]\+" | sed 's/#//' | sort -u)
            
            if [ -z "$PR_NUMBERS" ]; then
              # If no PR merge commits found, list commits instead
              PR_LIST=$(echo "$COMMITS_SINCE_TAG" | sed 's/^/- /')
            else
              # Get PR details for each PR number
              PR_LIST=""
              for pr_num in $PR_NUMBERS; do
                pr_info=$(gh pr view $pr_num --json number,title,url --jq '"- [#" + (.number|tostring) + "] " + .title + " (" + .url + ")"' 2>/dev/null || echo "- [#$pr_num] PR details not available")
                PR_LIST="$PR_LIST$pr_info"$'\n'
              done
            fi
          fi
        fi

        # Save changelog to output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$PR_LIST" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ needs.generate-version.outputs.version }}" -m "Release version ${{ needs.generate-version.outputs.version }}"
        git push origin "v${{ needs.generate-version.outputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.generate-version.outputs.version }}
        name: Release ${{ needs.generate-version.outputs.version }}
        body: |
          ## OpenLDAP Prometheus Exporter v${{ needs.generate-version.outputs.version }}

          ### Docker Images

          ```bash
          # Pull the latest version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```

          ### Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/commits/v${{ needs.generate-version.outputs.version }}
        draft: false
        prerelease: false
